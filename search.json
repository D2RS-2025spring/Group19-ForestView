[
  {
    "objectID": "humility-predict.html",
    "href": "humility-predict.html",
    "title": "2  湿度预测",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.tsa.arima.model import ARIMA\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import train_test_split\nimport warnings\nimport os\nwarnings.filterwarnings('ignore')\n\n# 设置中文显示（确保图表中文标题正常显示）\nplt.rcParams[\"font.family\"] = [\"SimHei\", \"WenQuanYi Micro Hei\"]  # 支持中文\nplt.rcParams['axes.unicode_minus'] = False  # 解决负号显示问题\n\n# 创建指定的保存目录（如果不存在）\noutput_dir = r\"C:\\Users\\PC\\Desktop\\湿度预测结果\"\nos.makedirs(output_dir, exist_ok=True)\n\n# 读取湿度数据（确保文件路径正确）\ndf = pd.read_csv(r\"C:\\Users\\PC\\Desktop\\数据驱动清洗后数据\\2013-2023monthly_avg_humidity.csv\")\n\n# 转换日期格式\ndf['date'] = pd.to_datetime(df['date'])\n\n# 湿度列——数值类型\ndf['humidity'] = pd.to_numeric(df['humidity'])\n\n# 设置日期为索引\ndf.set_index('date', inplace=True)\n\n# 数据探索\nprint(\"数据基本信息:\")\ndf.info()\n\n# 检查缺失值\nprint(\"\\n缺失值统计:\")\nprint(df.isnull().sum())\n\n# 填充缺失值（如果有，这里用前向填充）\ndf['humidity'].fillna(method='ffill', inplace=True)\n\n# ====================== 图表 1：月度平均湿度趋势 ======================\nplt.figure(figsize=(12, 6))\ndf['humidity'].plot(title='2013-2023年月度平均湿度趋势图')\nplt.xlabel('日期')\nplt.ylabel('湿度 (%)')\nplt.grid(True, linestyle='--', alpha=0.7)  # 添加网格线\nplt.tight_layout()  # 优化布局\nplt.savefig(os.path.join(output_dir, '1_月度平均湿度趋势图.png'))\nplt.show()\n\n# ====================== 图表 2：湿度季节性分解 ======================\nfrom statsmodels.tsa.seasonal import seasonal_decompose\ndecomposition = seasonal_decompose(df['humidity'], model='additive', period=12)\ntrend, seasonal, residual = decomposition.trend, decomposition.seasonal, decomposition.resid\n\nplt.figure(figsize=(12, 10))\nplt.suptitle('湿度时间序列季节性分解', y=0.95, fontsize=14)  # 添加总标题\n\nplt.subplot(411)\nplt.plot(df['humidity'], label='原始湿度数据')\nplt.legend()\n\nplt.subplot(412)\nplt.plot(trend, label='趋势成分', color='orange')\nplt.legend()\n\nplt.subplot(413)\nplt.plot(seasonal, label='季节性成分', color='green')\nplt.legend()\n\nplt.subplot(414)\nplt.plot(residual, label='残差成分', color='red')\nplt.legend()\n\nplt.tight_layout()\nplt.savefig(os.path.join(output_dir, '2_湿度季节性分解图.png'))\nplt.show()\n\n# ====================== 划分训练集和测试集 ======================\ntrain_size = int(len(df) * 0.8)\ntrain, test = df.iloc[:train_size], df.iloc[train_size:]\n\n# ====================== ARIMA模型训练与预测 ======================\nmodel = ARIMA(train['humidity'], order=(1, 1, 1), seasonal_order=(1, 1, 1, 12))\nmodel_fit = model.fit()\n\n# 预测测试集\npredictions = model_fit.forecast(steps=len(test))\npredictions.index = test.index\n\n# 计算RMSE\nrmse = np.sqrt(mean_squared_error(test['humidity'], predictions))\nprint(f'\\n测试集RMSE: {rmse:.2f}%')\n\n# ====================== 图表 3：预测结果对比 ======================\nplt.figure(figsize=(12, 6))\nplt.plot(train['humidity'], label='训练数据', alpha=0.6)\nplt.plot(test['humidity'], label='实际湿度', alpha=0.6)\nplt.plot(predictions, label='预测湿度', color='red', linestyle='--', alpha=0.8)\n\nplt.title('湿度预测结果对比图')\nplt.xlabel('日期')\nplt.ylabel('湿度 (%)')\nplt.legend()\nplt.grid(True, linestyle='--', alpha=0.5)\n\nplt.tight_layout()\nplt.savefig(os.path.join(output_dir, '3_湿度预测结果对比图.png'))\nplt.show()\n\n# ====================== 图表 4：未来12个月湿度预测 ======================\nfuture_predictions = model_fit.forecast(steps=12)\nfuture_dates = pd.date_range(start=df.index[-1], periods=13, freq='MS')[1:]  # 生成未来12个月日期\nfuture_predictions.index = future_dates\n\nplt.figure(figsize=(12, 6))\nplt.plot(df['humidity'], label='历史湿度数据', alpha=0.6)\nplt.plot(future_predictions, label='未来12个月预测', color='green', linestyle='--', alpha=0.8)\n\nplt.title('未来12个月湿度趋势预测图')\nplt.xlabel('日期')\nplt.ylabel('湿度 (%)')\nplt.legend()\nplt.grid(True, linestyle='--', alpha=0.5)\n\nplt.tight_layout()\nplt.savefig(os.path.join(output_dir, '4_未来湿度预测趋势图.png'))\nplt.show()\n\n# ====================== 保存预测结果 ======================\nsave_path = os.path.join(output_dir, '未来12个月湿度预测结果.csv')\nfuture_df = pd.DataFrame({\n    'date': future_dates.strftime('%Y-%m'),  # 格式化为年月\n    'predicted_humidity': future_predictions.round(2)  # 保留2位小数\n})\nfuture_df.to_csv(save_path, index=False, encoding='utf-8-sig')\nprint(f\"\\n✅ 未来12个月湿度预测结果已保存至：{save_path}\")\n\n# ====================== 保存模型评估报告 ======================\nreport_path = os.path.join(output_dir, '模型评估报告.txt')\nwith open(report_path, 'w', encoding='utf-8') as f:\n    f.write(\"==================== 湿度预测模型评估报告 ====================\\n\\n\")\n    f.write(f\"数据时间范围：{df.index.min().strftime('%Y-%m')} 至 {df.index.max().strftime('%Y-%m')}\\n\")\n    f.write(f\"训练集样本量：{len(train)}  |  测试集样本量：{len(test)}\\n\\n\")\n    f.write(f\"ARIMA模型参数：order=(1, 1, 1), seasonal_order=(1, 1, 1, 12)\\n\\n\")\n    f.write(f\"测试集RMSE（均方根误差）：{rmse:.2f}%\\n\")\n    f.write(\"（注：RMSE越小，模型预测精度越高）\\n\")\n\nprint(f\"✅ 模型评估报告已保存至：{report_path}\")\n\n数据基本信息:\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nDatetimeIndex: 127 entries, 2013-01-31 to 2023-07-31\nData columns (total 1 columns):\n #   Column    Non-Null Count  Dtype  \n---  ------    --------------  -----  \n 0   humidity  126 non-null    float64\ndtypes: float64(1)\nmemory usage: 2.0 KB\n\n缺失值统计:\nhumidity    1\ndtype: int64\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n测试集RMSE: 6.63%\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n✅ 未来12个月湿度预测结果已保存至：C:\\Users\\PC\\Desktop\\湿度预测结果\\未来12个月湿度预测结果.csv\n✅ 模型评估报告已保存至：C:\\Users\\PC\\Desktop\\湿度预测结果\\模型评估报告.txt",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>湿度预测</span>"
    ]
  },
  {
    "objectID": "precipitation-predict.html",
    "href": "precipitation-predict.html",
    "title": "3  降水预测",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.tsa.arima.model import ARIMA\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import train_test_split\nimport warnings\nimport os\nwarnings.filterwarnings('ignore')\n\n# 设置中文显示\nplt.rcParams[\"font.family\"] = [\"SimHei\", \"WenQuanYi Micro Hei\", \"Heiti TC\"]\nplt.rcParams['axes.unicode_minus'] = False  # 解决负号显示问题\n\n# 创建保存预测结果的目录（如果不存在）\noutput_dir = r\"C:\\Users\\PC\\Desktop\\降水预测结果\"\nos.makedirs(output_dir, exist_ok=True)\n\n# 读取降水量数据\ndata_path = r\"C:\\Users\\PC\\Desktop\\数据驱动清洗后数据\\2013-2023monthly_avg_precipitation.csv\"\ndf = pd.read_csv(data_path)\n\n# 转换日期格式\ndate_column = None\nfor col in df.columns:\n    if 'date' in col.lower() or '时间' in col:\n        date_column = col\n        break\n\nif date_column is None:\n    raise ValueError(\"无法在数据中找到日期列，请检查数据集格式。\")\n\ndf['date'] = pd.to_datetime(df[date_column])\n\n# 自动检测降水量列名\nprecipitation_column = None\npossible_names = ['precipitation', '降水量', 'rainfall', 'precip', '降水']\nfor col in df.columns:\n    if any(name in col.lower() for name in possible_names):\n        precipitation_column = col\n        break\n\nif precipitation_column is None:\n    raise ValueError(\"无法在数据中找到降水量列，请检查数据集格式。\")\n\n# 重命名为统一的 'precipitation'\ndf.rename(columns={precipitation_column: 'precipitation'}, inplace=True)\n\n# 降水量列——数值类型\ndf['precipitation'] = pd.to_numeric(df['precipitation'], errors='coerce')\n\n# 设置日期为索引\ndf.set_index('date', inplace=True)\n\n# 数据探索\nprint(\"数据基本信息:\")\ndf.info()\n\n# 检查缺失值\nprint(\"\\n缺失值统计:\")\nprint(df.isnull().sum())\n\n# 填充缺失值（如果有）\nif df['precipitation'].isnull().any():\n    print(\"\\n警告：降水量列包含缺失值，将使用前向填充。\")\n    df['precipitation'].fillna(method='ffill', inplace=True)\n\n# 数据可视化 - 月度平均降水量趋势\nplt.figure(figsize=(12, 6))\ndf['precipitation'].plot(title='2013-2023年月度平均降水量趋势图')\nplt.xlabel('日期')\nplt.ylabel('降水量 (mm)')\nplt.grid(True)\nplt.tight_layout()\nplt.savefig(os.path.join(output_dir, '1_月度平均降水量趋势图.png'))\nplt.show()\n\n# 季节性分解\nfrom statsmodels.tsa.seasonal import seasonal_decompose\ndecomposition = seasonal_decompose(df['precipitation'], model='additive', period=12)\ntrend = decomposition.trend\nseasonal = decomposition.seasonal\nresidual = decomposition.resid\n\n# 数据可视化 - 季节性分解\nplt.figure(figsize=(12, 10))\nplt.subplot(411)\nplt.plot(df['precipitation'], label='原始数据')\nplt.title('降水量季节性分解')\nplt.legend(loc='best')\nplt.subplot(412)\nplt.plot(trend, label='趋势')\nplt.legend(loc='best')\nplt.subplot(413)\nplt.plot(seasonal, label='季节性')\nplt.legend(loc='best')\nplt.subplot(414)\nplt.plot(residual, label='残差')\nplt.legend(loc='best')\nplt.tight_layout()\nplt.savefig(os.path.join(output_dir, '2_降水量季节性分解图.png'))\nplt.show()\n\n# 划分训练集和测试集\ntrain_size = int(len(df) * 0.8)\ntrain, test = df.iloc[:train_size], df.iloc[train_size:]\n\n# ARIMA模型训练与预测\n# 这里使用简单参数，实际应用中建议通过AIC/BIC等选择最优参数\nmodel = ARIMA(train['precipitation'], order=(1, 1, 1), seasonal_order=(1, 1, 1, 12))\nmodel_fit = model.fit()\n\n# 预测测试集\npredictions = model_fit.forecast(steps=len(test))\npredictions.index = test.index\n\n# 计算RMSE\nrmse = np.sqrt(mean_squared_error(test['precipitation'], predictions))\nprint(f'\\n测试集RMSE: {rmse:.2f} mm')\n\n# 数据可视化 - 预测结果\nplt.figure(figsize=(12, 6))\nplt.plot(train['precipitation'], label='训练数据')\nplt.plot(test['precipitation'], label='实际降水量')\nplt.plot(predictions, label='预测降水量', color='r')\nplt.title('降水量预测结果对比图')\nplt.xlabel('日期')\nplt.ylabel('降水量 (mm)')\nplt.legend()\nplt.grid(True)\nplt.tight_layout()\nplt.savefig(os.path.join(output_dir, '3_降水量预测结果对比图.png'))\nplt.show()\n\n# 未来12个月的降水量预测\nfuture_predictions = model_fit.forecast(steps=12)\nfuture_dates = pd.date_range(start=df.index[-1], periods=13, freq='MS')[1:]\nfuture_predictions.index = future_dates\n\n# 数据可视化 - 未来预测\nplt.figure(figsize=(12, 6))\nplt.plot(df['precipitation'], label='历史降水量')\nplt.plot(future_predictions, label='未来12个月预测', color='g', linestyle='--')\nplt.title('未来12个月降水量预测趋势图')\nplt.xlabel('日期')\nplt.ylabel('降水量 (mm)')\nplt.legend()\nplt.grid(True)\nplt.tight_layout()\nplt.savefig(os.path.join(output_dir, '4_未来降水量预测趋势图.png'))\nplt.show()\n\n# 保存预测结果\nsave_path = os.path.join(output_dir, '未来12个月降水量预测.csv')\nfuture_df = pd.DataFrame({\n    'date': future_dates,\n    'predicted_precipitation': future_predictions\n})\nfuture_df.to_csv(save_path, index=False, encoding='utf-8-sig')\nprint(f\"\\n未来12个月降水量预测已保存至 '{save_path}'\")\n\n# 保存模型评估结果\nwith open(os.path.join(output_dir, '模型评估报告.txt'), 'w', encoding='utf-8') as f:\n    f.write(f\"降水量预测模型评估报告\\n\")\n    f.write(f\"测试集RMSE: {rmse:.2f} mm\\n\\n\")\n    f.write(\"模型参数:\\n\")\n    f.write(f\"ARIMA: order=(1, 1, 1), seasonal_order=(1, 1, 1, 12)\\n\")\nprint(f\"模型评估报告已保存至 '{os.path.join(output_dir, '模型评估报告.txt')}'\")\n\n数据基本信息:\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nDatetimeIndex: 127 entries, 2013-01-31 to 2023-07-31\nData columns (total 1 columns):\n #   Column         Non-Null Count  Dtype  \n---  ------         --------------  -----  \n 0   precipitation  126 non-null    float64\ndtypes: float64(1)\nmemory usage: 2.0 KB\n\n缺失值统计:\nprecipitation    1\ndtype: int64\n\n警告：降水量列包含缺失值，将使用前向填充。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n测试集RMSE: 1.99 mm\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n未来12个月降水量预测已保存至 'C:\\Users\\PC\\Desktop\\降水预测结果\\未来12个月降水量预测.csv'\n模型评估报告已保存至 'C:\\Users\\PC\\Desktop\\降水预测结果\\模型评估报告.txt'",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>降水预测</span>"
    ]
  },
  {
    "objectID": "sealevelpressure-predict.html",
    "href": "sealevelpressure-predict.html",
    "title": "4  海平面压力预测",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.tsa.arima.model import ARIMA\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import train_test_split\nimport warnings\nimport os\nwarnings.filterwarnings('ignore')\n\n# 设置中文显示\nplt.rcParams[\"font.family\"] = [\"SimHei\", \"WenQuanYi Micro Hei\", \"Heiti TC\"]\nplt.rcParams['axes.unicode_minus'] = False  # 解决负号显示问题\n\n# 创建保存预测结果的目录（如果不存在）\noutput_dir = r\"C:\\Users\\PC\\Desktop\\海平面压力预测结果\"\nos.makedirs(output_dir, exist_ok=True)\n\n# 读取海平面压力数据\ndf = pd.read_csv(r\"C:\\Users\\PC\\Desktop\\数据驱动清洗后数据\\2013-2023monthly_avg_sealevelpressure.csv\")\n\n# 转换日期格式\ndf['date'] = pd.to_datetime(df['date'])\n\n# 海平面压力列——数值类型\ndf['sealevelpressure'] = pd.to_numeric(df['sealevelpressure'])\n\n# 设置日期为索引\ndf.set_index('date', inplace=True)\n\n# 数据探索\nprint(\"数据基本信息:\")\ndf.info()\n\n# 检查缺失值\nprint(\"\\n缺失值统计:\")\nprint(df.isnull().sum())\n\n# 填充缺失值（如果有）\ndf['sealevelpressure'].fillna(method='ffill', inplace=True)\n\n# 数据可视化 - 月度平均海平面压力趋势\nplt.figure(figsize=(12, 6))\ndf['sealevelpressure'].plot(title='2013-2023年月度平均海平面压力趋势图')\nplt.xlabel('日期')\nplt.ylabel('海平面压力 (hPa)')\nplt.grid(True)\nplt.tight_layout()\nplt.savefig(os.path.join(output_dir, '1_月度平均海平面压力趋势图.png'))\nplt.show()\n\n# 季节性分解\nfrom statsmodels.tsa.seasonal import seasonal_decompose\ndecomposition = seasonal_decompose(df['sealevelpressure'], model='additive', period=12)\ntrend = decomposition.trend\nseasonal = decomposition.seasonal\nresidual = decomposition.resid\n\n# 数据可视化 - 季节性分解\nplt.figure(figsize=(12, 10))\nplt.subplot(411)\nplt.plot(df['sealevelpressure'], label='原始数据')\nplt.title('海平面压力季节性分解')\nplt.legend(loc='best')\nplt.subplot(412)\nplt.plot(trend, label='趋势')\nplt.legend(loc='best')\nplt.subplot(413)\nplt.plot(seasonal, label='季节性')\nplt.legend(loc='best')\nplt.subplot(414)\nplt.plot(residual, label='残差')\nplt.legend(loc='best')\nplt.tight_layout()\nplt.savefig(os.path.join(output_dir, '2_海平面压力季节性分解图.png'))\nplt.show()\n\n# 划分训练集和测试集\ntrain_size = int(len(df) * 0.8)\ntrain, test = df.iloc[:train_size], df.iloc[train_size:]\n\n# ARIMA模型训练与预测\n# 这里使用简单参数，实际应用中建议通过AIC/BIC等选择最优参数\nmodel = ARIMA(train['sealevelpressure'], order=(1, 1, 1), seasonal_order=(1, 1, 1, 12))\nmodel_fit = model.fit()\n\n# 预测测试集\npredictions = model_fit.forecast(steps=len(test))\npredictions.index = test.index\n\n# 计算RMSE\nrmse = np.sqrt(mean_squared_error(test['sealevelpressure'], predictions))\nprint(f'\\n测试集RMSE: {rmse:.2f} hPa')\n\n# 数据可视化 - 预测结果\nplt.figure(figsize=(12, 6))\nplt.plot(train['sealevelpressure'], label='训练数据')\nplt.plot(test['sealevelpressure'], label='实际海平面压力')\nplt.plot(predictions, label='预测海平面压力', color='r')\nplt.title('海平面压力预测结果对比图')\nplt.xlabel('日期')\nplt.ylabel('海平面压力 (hPa)')\nplt.legend()\nplt.grid(True)\nplt.tight_layout()\nplt.savefig(os.path.join(output_dir, '3_海平面压力预测结果对比图.png'))\nplt.show()\n\n# 未来12个月的海平面压力预测\nfuture_predictions = model_fit.forecast(steps=12)\nfuture_dates = pd.date_range(start=df.index[-1], periods=13, freq='MS')[1:]\nfuture_predictions.index = future_dates\n\n# 数据可视化 - 未来预测\nplt.figure(figsize=(12, 6))\nplt.plot(df['sealevelpressure'], label='历史海平面压力')\nplt.plot(future_predictions, label='未来12个月预测', color='g', linestyle='--')\nplt.title('未来12个月海平面压力预测趋势图')\nplt.xlabel('日期')\nplt.ylabel('海平面压力 (hPa)')\nplt.legend()\nplt.grid(True)\nplt.tight_layout()\nplt.savefig(os.path.join(output_dir, '4_未来海平面压力预测趋势图.png'))\nplt.show()\n\n# 保存预测结果\nsave_path = os.path.join(output_dir, '未来12个月海平面压力预测.csv')\nfuture_df = pd.DataFrame({\n    'date': future_dates,\n    'predicted_sealevelpressure': future_predictions\n})\nfuture_df.to_csv(save_path, index=False, encoding='utf-8-sig')\nprint(f\"\\n未来12个月海平面压力预测已保存至 '{save_path}'\")\n\n# 保存模型评估结果\nwith open(os.path.join(output_dir, '模型评估报告.txt'), 'w', encoding='utf-8') as f:\n    f.write(f\"海平面压力预测模型评估报告\\n\")\n    f.write(f\"测试集RMSE: {rmse:.2f} hPa\\n\\n\")\n    f.write(\"模型参数:\\n\")\n    f.write(f\"ARIMA: order=(1, 1, 1), seasonal_order=(1, 1, 1, 12)\\n\")\nprint(f\"模型评估报告已保存至 '{os.path.join(output_dir, '模型评估报告.txt')}'\")\n\n数据基本信息:\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nDatetimeIndex: 127 entries, 2013-01-31 to 2023-07-31\nData columns (total 1 columns):\n #   Column            Non-Null Count  Dtype  \n---  ------            --------------  -----  \n 0   sealevelpressure  126 non-null    float64\ndtypes: float64(1)\nmemory usage: 2.0 KB\n\n缺失值统计:\nsealevelpressure    1\ndtype: int64\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n测试集RMSE: 2.31 hPa\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n未来12个月海平面压力预测已保存至 'C:\\Users\\PC\\Desktop\\海平面压力预测结果\\未来12个月海平面压力预测.csv'\n模型评估报告已保存至 'C:\\Users\\PC\\Desktop\\海平面压力预测结果\\模型评估报告.txt'",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>海平面压力预测</span>"
    ]
  },
  {
    "objectID": "temp-predict.html",
    "href": "temp-predict.html",
    "title": "5  温度预测",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.tsa.arima.model import ARIMA\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import train_test_split\nimport warnings\nimport os\nwarnings.filterwarnings('ignore')\n\n# 设置中文显示\nplt.rcParams[\"font.family\"] = [\"SimHei\", \"WenQuanYi Micro Hei\", \"Heiti TC\"]\nplt.rcParams['axes.unicode_minus'] = False  # 解决负号显示问题\n\n# 创建保存预测结果的目录（如果不存在）\noutput_dir = r\"C:\\Users\\PC\\Desktop\\温度预测结果\"\nos.makedirs(output_dir, exist_ok=True)\n\n# 读取温度数据\ndf = pd.read_csv(r\"C:\\Users\\PC\\Desktop\\数据驱动清洗后数据\\2013-2023monthly_avg_temperature.csv\")\n\n# 转换日期格式\ndf['date'] = pd.to_datetime(df['date'])\n\n# 温度列——数值类型\ndf['temperature'] = pd.to_numeric(df['temperature'])\n\n# 设置日期为索引\ndf.set_index('date', inplace=True)\n\n# 数据探索\nprint(\"数据基本信息:\")\ndf.info()\n\n# 检查缺失值\nprint(\"\\n缺失值统计:\")\nprint(df.isnull().sum())\n\n# 填充缺失值（如果有）\ndf['temperature'].fillna(method='ffill', inplace=True)\n\n# 数据可视化 - 月度平均温度趋势\nplt.figure(figsize=(12, 6))\ndf['temperature'].plot(title='2013-2023年月度平均温度趋势图')\nplt.xlabel('日期')\nplt.ylabel('温度 (°C)')\nplt.grid(True)\nplt.tight_layout()\nplt.savefig(os.path.join(output_dir, '月度平均温度趋势.png'))\nplt.show()\n\n# 季节性分解\nfrom statsmodels.tsa.seasonal import seasonal_decompose\ndecomposition = seasonal_decompose(df['temperature'], model='additive', period=12)\ntrend = decomposition.trend\nseasonal = decomposition.seasonal\nresidual = decomposition.resid\n\n# 数据可视化 - 季节性分解\nplt.figure(figsize=(12, 10))\nplt.subplot(411)\nplt.plot(df['temperature'], label='原始数据')\nplt.title('温度季节性分解')\nplt.legend(loc='best')\nplt.subplot(412)\nplt.plot(trend, label='趋势')\nplt.legend(loc='best')\nplt.subplot(413)\nplt.plot(seasonal, label='季节性')\nplt.legend(loc='best')\nplt.subplot(414)\nplt.plot(residual, label='残差')\nplt.legend(loc='best')\nplt.tight_layout()\nplt.savefig(os.path.join(output_dir, '温度季节性分解.png'))\nplt.show()\n\n# 划分训练集和测试集\ntrain_size = int(len(df) * 0.8)\ntrain, test = df.iloc[:train_size], df.iloc[train_size:]\n\n# ARIMA模型训练与预测\n# 这里使用简单参数，实际应用中建议通过AIC/BIC等选择最优参数\nmodel = ARIMA(train['temperature'], order=(1, 1, 1), seasonal_order=(1, 1, 1, 12))\nmodel_fit = model.fit()\n\n# 预测测试集\npredictions = model_fit.forecast(steps=len(test))\npredictions.index = test.index\n\n# 计算RMSE\nrmse = np.sqrt(mean_squared_error(test['temperature'], predictions))\nprint(f'\\n测试集RMSE: {rmse:.2f}°C')\n\n# 数据可视化 - 预测结果\nplt.figure(figsize=(12, 6))\nplt.plot(train['temperature'], label='训练数据')\nplt.plot(test['temperature'], label='实际温度')\nplt.plot(predictions, label='预测温度', color='r')\nplt.title('温度预测结果对比图')\nplt.xlabel('日期')\nplt.ylabel('温度 (°C)')\nplt.legend()\nplt.grid(True)\nplt.tight_layout()\nplt.savefig(os.path.join(output_dir, '温度预测结果.png'))\nplt.show()\n\n# 未来12个月的温度预测\nfuture_predictions = model_fit.forecast(steps=12)\nfuture_dates = pd.date_range(start=df.index[-1], periods=13, freq='MS')[1:]\nfuture_predictions.index = future_dates\n\n# 数据可视化 - 未来预测\nplt.figure(figsize=(12, 6))\nplt.plot(df['temperature'], label='历史温度')\nplt.plot(future_predictions, label='未来12个月预测', color='g', linestyle='--')\nplt.title('未来12个月温度预测趋势图')\nplt.xlabel('日期')\nplt.ylabel('温度 (°C)')\nplt.legend()\nplt.grid(True)\nplt.tight_layout()\nplt.savefig(os.path.join(output_dir, '未来温度预测.png'))\nplt.show()\n\n# 保存预测结果\nsave_path = os.path.join(output_dir, '未来12个月温度预测.csv')\nfuture_df = pd.DataFrame({\n    'date': future_dates,\n    'predicted_temperature': future_predictions\n})\nfuture_df.to_csv(save_path, index=False, encoding='utf-8-sig')\nprint(f\"\\n未来12个月温度预测已保存至 '{save_path}'\")\n\n# 保存模型评估结果\nwith open(os.path.join(output_dir, '模型评估报告.txt'), 'w', encoding='utf-8') as f:\n    f.write(f\"温度预测模型评估报告\\n\")\n    f.write(f\"测试集RMSE: {rmse:.2f}°C\\n\\n\")\n    f.write(\"模型参数:\\n\")\n    f.write(f\"ARIMA: order=(1, 1, 1), seasonal_order=(1, 1, 1, 12)\\n\")\nprint(f\"模型评估报告已保存至 '{os.path.join(output_dir, '模型评估报告.txt')}'\")\n\n数据基本信息:\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nDatetimeIndex: 127 entries, 2013-01-31 to 2023-07-31\nData columns (total 1 columns):\n #   Column       Non-Null Count  Dtype  \n---  ------       --------------  -----  \n 0   temperature  126 non-null    float64\ndtypes: float64(1)\nmemory usage: 2.0 KB\n\n缺失值统计:\ntemperature    1\ndtype: int64\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n测试集RMSE: 1.22°C\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n未来12个月温度预测已保存至 'C:\\Users\\PC\\Desktop\\温度预测结果\\未来12个月温度预测.csv'\n模型评估报告已保存至 'C:\\Users\\PC\\Desktop\\温度预测结果\\模型评估报告.txt'",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>温度预测</span>"
    ]
  },
  {
    "objectID": "windspeed-predict.html",
    "href": "windspeed-predict.html",
    "title": "6  风力预测",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.tsa.arima.model import ARIMA\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import train_test_split\nimport warnings\nimport os\nwarnings.filterwarnings('ignore')\n\n# 设置中文显示\nplt.rcParams[\"font.family\"] = [\"SimHei\", \"WenQuanYi Micro Hei\", \"Heiti TC\"]\nplt.rcParams['axes.unicode_minus'] = False  # 解决负号显示问题\n\n# 创建保存预测结果的目录（如果不存在）\noutput_dir = r\"C:\\Users\\PC\\Desktop\\风速预测结果\"\nos.makedirs(output_dir, exist_ok=True)\n\n# 读取风速数据\ndf = pd.read_csv(r\"C:\\Users\\PC\\Desktop\\数据驱动清洗后数据\\2013-2023monthly_avg_windspeed.csv\")\n\n# 转换日期格式\ndf['date'] = pd.to_datetime(df['date'])\n\n# 风速列——数值类型\ndf['windspeed'] = pd.to_numeric(df['windspeed'])\n\n# 设置日期为索引\ndf.set_index('date', inplace=True)\n\n# 数据探索\nprint(\"数据基本信息:\")\ndf.info()\n\n# 检查缺失值\nprint(\"\\n缺失值统计:\")\nprint(df.isnull().sum())\n\n# 填充缺失值（如果有）\ndf['windspeed'].fillna(method='ffill', inplace=True)\n\n# 数据可视化 - 月度平均风速趋势\nplt.figure(figsize=(12, 6))\ndf['windspeed'].plot(title='2013-2023年月度平均风速趋势图')\nplt.xlabel('日期')\nplt.ylabel('风速 (m/s)')\nplt.grid(True)\nplt.tight_layout()\nplt.savefig(os.path.join(output_dir, '1_月度平均风速趋势图.png'))\nplt.show()\n\n# 季节性分解\nfrom statsmodels.tsa.seasonal import seasonal_decompose\ndecomposition = seasonal_decompose(df['windspeed'], model='additive', period=12)\ntrend = decomposition.trend\nseasonal = decomposition.seasonal\nresidual = decomposition.resid\n\n# 数据可视化 - 季节性分解\nplt.figure(figsize=(12, 10))\nplt.subplot(411)\nplt.plot(df['windspeed'], label='原始数据')\nplt.title('风速季节性分解')\nplt.legend(loc='best')\nplt.subplot(412)\nplt.plot(trend, label='趋势')\nplt.legend(loc='best')\nplt.subplot(413)\nplt.plot(seasonal, label='季节性')\nplt.legend(loc='best')\nplt.subplot(414)\nplt.plot(residual, label='残差')\nplt.legend(loc='best')\nplt.tight_layout()\nplt.savefig(os.path.join(output_dir, '2_风速季节性分解图.png'))\nplt.show()\n\n# 划分训练集和测试集\ntrain_size = int(len(df) * 0.8)\ntrain, test = df.iloc[:train_size], df.iloc[train_size:]\n\n# ARIMA模型训练与预测\n# 这里使用简单参数，实际应用中建议通过AIC/BIC等选择最优参数\nmodel = ARIMA(train['windspeed'], order=(1, 1, 1), seasonal_order=(1, 1, 1, 12))\nmodel_fit = model.fit()\n\n# 预测测试集\npredictions = model_fit.forecast(steps=len(test))\npredictions.index = test.index\n\n# 计算RMSE\nrmse = np.sqrt(mean_squared_error(test['windspeed'], predictions))\nprint(f'\\n测试集RMSE: {rmse:.2f} m/s')\n\n# 数据可视化 - 预测结果\nplt.figure(figsize=(12, 6))\nplt.plot(train['windspeed'], label='训练数据')\nplt.plot(test['windspeed'], label='实际风速')\nplt.plot(predictions, label='预测风速', color='r')\nplt.title('风速预测结果对比图')\nplt.xlabel('日期')\nplt.ylabel('风速 (m/s)')\nplt.legend()\nplt.grid(True)\nplt.tight_layout()\nplt.savefig(os.path.join(output_dir, '3_风速预测结果对比图.png'))\nplt.show()\n\n# 未来12个月的风速预测\nfuture_predictions = model_fit.forecast(steps=12)\nfuture_dates = pd.date_range(start=df.index[-1], periods=13, freq='MS')[1:]\nfuture_predictions.index = future_dates\n\n# 数据可视化 - 未来预测\nplt.figure(figsize=(12, 6))\nplt.plot(df['windspeed'], label='历史风速')\nplt.plot(future_predictions, label='未来12个月预测', color='g', linestyle='--')\nplt.title('未来12个月风速预测趋势图')\nplt.xlabel('日期')\nplt.ylabel('风速 (m/s)')\nplt.legend()\nplt.grid(True)\nplt.tight_layout()\nplt.savefig(os.path.join(output_dir, '4_未来风速预测趋势图.png'))\nplt.show()\n\n# 保存预测结果\nsave_path = os.path.join(output_dir, '未来12个月风速预测.csv')\nfuture_df = pd.DataFrame({\n    'date': future_dates,\n    'predicted_windspeed': future_predictions\n})\nfuture_df.to_csv(save_path, index=False, encoding='utf-8-sig')\nprint(f\"\\n未来12个月风速预测已保存至 '{save_path}'\")\n\n# 保存模型评估结果\nwith open(os.path.join(output_dir, '模型评估报告.txt'), 'w', encoding='utf-8') as f:\n    f.write(f\"风速预测模型评估报告\\n\")\n    f.write(f\"测试集RMSE: {rmse:.2f} m/s\\n\\n\")\n    f.write(\"模型参数:\\n\")\n    f.write(f\"ARIMA: order=(1, 1, 1), seasonal_order=(1, 1, 1, 12)\\n\")\nprint(f\"模型评估报告已保存至 '{os.path.join(output_dir, '模型评估报告.txt')}'\")\n\n数据基本信息:\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nDatetimeIndex: 103 entries, 2013-01-31 to 2023-07-31\nData columns (total 1 columns):\n #   Column     Non-Null Count  Dtype  \n---  ------     --------------  -----  \n 0   windspeed  102 non-null    float64\ndtypes: float64(1)\nmemory usage: 1.6 KB\n\n缺失值统计:\nwindspeed    1\ndtype: int64\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n测试集RMSE: 3.83 m/s\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n未来12个月风速预测已保存至 'C:\\Users\\PC\\Desktop\\风速预测结果\\未来12个月风速预测.csv'\n模型评估报告已保存至 'C:\\Users\\PC\\Desktop\\风速预测结果\\模型评估报告.txt'",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>风力预测</span>"
    ]
  },
  {
    "objectID": "summary-report.html",
    "href": "summary-report.html",
    "title": "7  天气预测项目总结",
    "section": "",
    "text": "7.1 一、风速历史数据和未来12个月预测总结",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>天气预测项目总结</span>"
    ]
  },
  {
    "objectID": "summary-report.html#一风速历史数据和未来12个月预测总结",
    "href": "summary-report.html#一风速历史数据和未来12个月预测总结",
    "title": "7  天气预测项目总结",
    "section": "",
    "text": "7.1.1 1. 历史风速趋势\n\n2012-2020年：风速波动显著，最高近30 m/s，最低约15 m/s。\n\n2020年后：风速显著下降，2022年达低点（约10 m/s），随后略有回升但维持低位。\n\n\n\n7.1.2 2. 未来12个月风速预测\n\n2023年：风速先升至接近15 m/s，后逐渐下降。\n\n2024年：预测风速降至10 m/s以下。\n\n\n\n7.1.3 3. 数据分解分析\n\n周期性：原始数据呈明显周期性，数值范围10-30 m/s。\n\n趋势：整体呈下降趋势，2018年后显著下降，2022年触底后回升。\n\n季节性：每年有相似波峰波谷，周期性波动明显。\n\n残差：数据波动随机，无明显趋势或季节性模式。\n\n\n\n7.1.4 4. 预测结果对比\n\n训练数据：涵盖2020年前历史数据。\n\n对比结论：2020年后实际风速与预测趋势相似，但存在差异。\n\n\n\n7.1.5 5. 月度平均风速变化趋势\n\n2013-2016年：波动大，多次达高值。\n\n2017-2018年：波动仍大，整体趋势下降。\n\n2019-2020年：相对稳定（约25 m/s）。\n\n2021年：显著下降，最低近10 m/s。\n\n2022-2023年：风速低且波动小（10-15 m/s）。\n\n结论：风速从高波动趋于稳定低位，未来12个月预计先升后降。",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>天气预测项目总结</span>"
    ]
  },
  {
    "objectID": "summary-report.html#二未来12个月海平面压力预测总结",
    "href": "summary-report.html#二未来12个月海平面压力预测总结",
    "title": "7  天气预测项目总结",
    "section": "7.2 二、未来12个月海平面压力预测总结",
    "text": "7.2 二、未来12个月海平面压力预测总结\n\n7.2.1 1. 历史数据趋势分析\n\n时间范围：2014-2023年。\n\n波动范围：1005-1030 hPa，每两年出现显著低谷和高峰，与大气环流、海洋温度相关。\n\n\n\n7.2.2 2. 未来12个月预测\n\n趋势：先升至1030 hPa，后降至1005 hPa，再回升至1025 hPa，延续历史周期性。\n\n\n\n7.2.3 3. 季节性分解分析\n\n原始数据：周期性明显，范围1000-1025 hPa。\n\n趋势部分：2016年达峰值后下降，2020年出现低谷。\n\n季节性部分：每年波峰波谷相似，周期性显著。\n\n残差部分：随机波动，无明显趋势或周期性。\n\n\n\n7.2.4 4. 模型预测结果对比\n\n训练数据（蓝色曲线）：显示周期性高峰和低谷。\n\n实测与预测（橙色/红色虚线）：趋势相似，但2022-2023年存在显著偏差，模型需优化。\n\n\n\n7.2.5 5. 年度平均海平面气压变化趋势\n\n2013-2023年8月：年度平均值1004-1020 hPa，2020年低谷（1013 hPa）后回升。\n\n结论：海平面压力呈周期性波动，模型能捕捉趋势但需提高精度。",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>天气预测项目总结</span>"
    ]
  },
  {
    "objectID": "summary-report.html#三未来12个月降水量预测总结",
    "href": "summary-report.html#三未来12个月降水量预测总结",
    "title": "7  天气预测项目总结",
    "section": "7.3 三、未来12个月降水量预测总结",
    "text": "7.3 三、未来12个月降水量预测总结\n\n7.3.1 1. 历史降雨量趋势\n\n波动性：2013、2016、2017、2019年出现高峰，2016年峰值超10毫米。\n\n下降趋势：2020年后降雨量显著减少，低于2毫米。\n\n\n\n7.3.2 2. 未来12个月降雨量预测\n\n2023年末至2024年初：预计增至接近6毫米。\n\n2024年部分月份：预测值出现负值，可能为模型误差，需验证。\n\n\n\n7.3.3 3. 模型评估与预测准确性\n\n训练数据（2014-2019年）：历史峰值高于预测峰值。\n\n2020年后预测：最高值约5毫米，低于历史最大值。\n\n\n\n7.3.4 4. 时间序列分析\n\n趋势：总体下降，2019年后显著降低。\n\n季节性：每年有重复季节性模式。\n\n残差：随机波动，无明显趋势或周期性。\n\n结论与建议：模型需优化以消除负值，密切关注实际降雨变化。",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>天气预测项目总结</span>"
    ]
  },
  {
    "objectID": "summary-report.html#四湿度总结",
    "href": "summary-report.html#四湿度总结",
    "title": "7  天气预测项目总结",
    "section": "7.4 四、湿度总结",
    "text": "7.4 四、湿度总结\n\n7.4.1 1. 原始湿度数据分析\n\n2014-2024年：原始数据呈明显波动和周期性，反映年度波动、长期趋势和随机波动。\n\n\n\n7.4.2 2. 湿度趋势成分分析\n\n2019年达高峰后下降，随后趋于平稳，长期因素影响显著。\n\n\n\n7.4.3 3. 湿度季节性成分分析\n\n每年有波峰和波谷，与季节变化相关（夏季高、冬季低）。\n\n\n\n7.4.4 4. 湿度残差成分分析\n\n去除趋势和季节性后为随机波动，受短期天气影响。\n\n\n\n7.4.5 5. 未来12个月湿度预测分析\n\n时间范围：2023年9月-2024年8月。\n\n波动范围：40.88%-67.91%，2023年10-11月较高，2024年4月和7月较低，整体趋势平稳。\n\n结论：湿度具季节性和长期趋势，未来12个月波动但无明显升降趋势。",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>天气预测项目总结</span>"
    ]
  },
  {
    "objectID": "summary-report.html#五温度预测总结",
    "href": "summary-report.html#五温度预测总结",
    "title": "7  天气预测项目总结",
    "section": "7.5 五、温度预测总结",
    "text": "7.5 五、温度预测总结\n\n7.5.1 1. 温度预测结果对比\n\n训练数据（蓝色虚线）：2014-2024年周期性波动，反映季节性变化。\n\n实际温度（橙色虚线）：与训练数据重合，模型在训练范围内准确性高。\n\n预测温度（红色实线）：2022年起预测，2023-2024年波动和偏差较大，尤其在峰值/谷值处。\n\n\n\n7.5.2 2. 温度数据的季节性分解\n\n原始数据：2013-2024年，年度周期性波动显著。\n\n趋势：长期略有上升波动。\n\n季节性：每年同期出现波峰波谷（高温期近25°C，低温期低于0°C）。\n\n残差：随机波动，无明显趋势或周期性。\n\n\n\n7.5.3 3. 未来12个月的温度预测趋势\n\n历史温度（蓝色实线）：年度周期性明显，高温期25-30°C，低温期-5到5°C。\n\n预测温度（绿色虚线）：延续季节性，波动幅度减小，最高约20°C（2024年中），最低约0°C（2024年初/末）。\n\n总结：历史温度季节性显著，未来预测延续趋势但存在偏差，需关注峰值/谷值波动。",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>天气预测项目总结</span>"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "基于ARIMA模型的10年北京天气可视化及其预测",
    "section": "",
    "text": "1 项目简介\n本项目基于 2013 - 2023 年北京天气数据（包含温度、湿度、降水量、海平面气压、风速五种指标），利用 ARIMA 模型实现天气数据的可视化分析与预测，主要功能包括：",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>项目简介</span>"
    ]
  },
  {
    "objectID": "index.html#分工",
    "href": "index.html#分工",
    "title": "基于ARIMA模型的10年北京天气可视化及其预测",
    "section": "1.1 分工",
    "text": "1.1 分工\n\n庞路遥：数据清洗与加载，确保多源数据准确合并\n刘子臻：可视化模块实现，绘制时间序列图与统计分析图\n刘佳琪 ：ARIMA 模型构建与预测，优化模型参数提升精度\n苏孟珂：文档撰写与测试，保障项目流程清晰、代码稳定运行\n\n通过团队协作，本项目实现了对北京天气数据的深度分析，为城市规划、气象研究等提供数据支持与预测参考。",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>项目简介</span>"
    ]
  }
]